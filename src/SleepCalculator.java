/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Mithusan Arulampalam
 * 
 */
//Calculates the number of hours a person has 
//spent sleeping from the time the user was born until today.
public class SleepCalculator extends javax.swing.JFrame {

    /**
     * Creates new form SleepCalculator
     */
    public SleepCalculator() {
        initComponents();
        //Makes select text fields uneditable by User
        AliveOutput.setEditable(false);
        SleepOutput.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLabel = new javax.swing.JLabel();
        BirthdateLabel = new javax.swing.JLabel();
        TodayLabel = new javax.swing.JLabel();
        BDayLabel = new javax.swing.JLabel();
        BMonthLabel = new javax.swing.JLabel();
        BYearLabel = new javax.swing.JLabel();
        BDayInput = new javax.swing.JTextField();
        BMonthInput = new javax.swing.JTextField();
        BYearInput = new javax.swing.JTextField();
        TDayLabel = new javax.swing.JLabel();
        TMonthLabel = new javax.swing.JLabel();
        TYearLabel = new javax.swing.JLabel();
        TDayInput = new javax.swing.JTextField();
        TMonthInput = new javax.swing.JTextField();
        TYearInput = new javax.swing.JTextField();
        Calculate = new javax.swing.JButton();
        Quit = new javax.swing.JButton();
        AliveOutput = new javax.swing.JTextField();
        SleepOutput = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TitleLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TitleLabel.setForeground(new java.awt.Color(51, 153, 255));
        TitleLabel.setText("Sleep Calculator");

        BirthdateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BirthdateLabel.setText("Enter Your Birthdate");

        TodayLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TodayLabel.setText("Enter Today's Date");

        BDayLabel.setText("Day");

        BMonthLabel.setText("Month");

        BYearLabel.setText("Year");

        BDayInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDayInputActionPerformed(evt);
            }
        });

        BMonthInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMonthInputActionPerformed(evt);
            }
        });

        BYearInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BYearInputActionPerformed(evt);
            }
        });

        TDayLabel.setText("Day");

        TMonthLabel.setText("Month");

        TYearLabel.setText("Year");

        TDayInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TDayInputActionPerformed(evt);
            }
        });

        TMonthInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TMonthInputActionPerformed(evt);
            }
        });

        TYearInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TYearInputActionPerformed(evt);
            }
        });

        Calculate.setText("Calculate");
        Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateActionPerformed(evt);
            }
        });

        Quit.setText("Quit");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });

        AliveOutput.setText("You Have Alive For ...");
        AliveOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AliveOutputActionPerformed(evt);
            }
        });

        SleepOutput.setText("You Have Slept For ...");
        SleepOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SleepOutputActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(TDayInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(TYearLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(TMonthLabel)
                            .addGap(18, 18, 18)
                            .addComponent(TMonthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TodayLabel)
                            .addComponent(TDayLabel))))
                .addGap(42, 42, 42))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(TitleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BDayLabel))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(BDayInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(BirthdateLabel)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BYearLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BMonthLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(BMonthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Calculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Quit, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AliveOutput)
                                    .addComponent(SleepOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(BYearLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TitleLabel)
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(BMonthLabel)
                                        .addGap(22, 22, 22)
                                        .addComponent(BYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(BirthdateLabel)
                                            .addComponent(TodayLabel))
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(BDayLabel)
                                                    .addComponent(BDayInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(BMonthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(42, 42, 42))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(TYearLabel))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(TDayLabel)
                                                        .addComponent(TDayInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(46, 46, 46)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(TMonthLabel)
                                                            .addComponent(TMonthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(19, 19, 19)
                                                .addComponent(TYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addGap(28, 28, 28)
                        .addComponent(Calculate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(AliveOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Quit)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(SleepOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void BDayInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDayInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BDayInputActionPerformed

    private void BMonthInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMonthInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BMonthInputActionPerformed

    private void BYearInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BYearInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BYearInputActionPerformed

    private void TDayInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TDayInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TDayInputActionPerformed

    private void TMonthInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TMonthInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TMonthInputActionPerformed

    private void TYearInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TYearInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TYearInputActionPerformed

    private void CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateActionPerformed
        //Initiallizes the Variable
        int Month = 0;
        int Day = 0;
        int Year = 0;
        int TotalDays = 0;
        
        //TRYCATCH
        try{
            //Birthdate
            int BYear = Integer.parseInt(BYearInput.getText());//Year
            int BMonth = Integer.parseInt(BMonthInput.getText());//Month
            int BDay = Integer.parseInt(BDayInput.getText());//Day

            //Todays Date
            int TYear = Integer.parseInt(TYearInput.getText());//Year
            int TMonth = Integer.parseInt(TMonthInput.getText());//Month
            int TDay = Integer.parseInt(TDayInput.getText());//Day 

            //Checks if User inputs the right amount of Days (1-30)
            //Checks if User inputs the right amount of Months (1-12)
            if (BDay >= 1 && BDay <= 30 && BMonth >= 1 && BMonth <= 12 && TDay >= 1 && TDay <= 30 && TMonth >= 1 && TMonth <=12){
                //CALCULATIONS
                //If Birthdate is greater than todays date
                if (BDay > TDay || BDay == TDay){
                    if (TMonth > BMonth || TMonth == BMonth){//If Todays Month is Greater than Birthmonth 
                        Year = (TYear - BYear) * 365;//Amount of Days in Years
                        Month = (TMonth - BMonth)* 30;//Amount of Days in Months
                        Day = TDay - BDay;//Difference in Days
                        
                        //Calculates Total Days
                        TotalDays = Year + Month + Day;
                    }
                    if (BMonth > TMonth){//If Birthmonth is greater than Todays Month
                        Year = (TYear - BYear) * 365;//Amount of Days in Years
                        Month = (TMonth - BMonth - 1)*30;//Amount of Days in Months
                        Day = (BDay - TDay);//Difference in Days
                        
                        //Calculates Total Days
                        TotalDays = Year + Month + Day;
                    }
                } 
                
                else{//if Today's Date is greater than Birthdate
                    if (TMonth > BMonth || TMonth == BMonth){//If Todays Month is Greater than Birthmonth 
                        Year = (TYear - BYear) * 365;//Amount of Days in Years
                        Month = (Math.abs(BMonth - TMonth))* 30;//Amount of Days in Months
                        Day = TDay - BDay;//Difference in Days
                        
                        //Calculates Total Days
                        TotalDays = Year + Month + Day;
                    }
                    if (BMonth > TMonth){//If Birthmonth is greater than Todays Month
                        Year = (TYear - BYear) * 365;//Amount of Days in Years
                        Month = (TMonth - BMonth - 1)*30;//Amount of Days in Months
                        Day = (BDay - TDay);//Difference in Days
                        
                        //Calculates Total Days
                        TotalDays = Year + Month + Day;
                }
                }

                //Hours
                int Hour = TotalDays * 8;//Calculates number of hours

                //Output
                AliveOutput.setText("You Have Alive For " + Integer.toString(TotalDays) + " Days");
                SleepOutput.setText("You Have Slept For " + Integer.toString(Hour) + " Hours");
            }
            else{//Error Output
                AliveOutput.setText("Choose a Day from 1 - 30");
                SleepOutput.setText("Choose a Month from 1 - 12");
            }
            
        }
        catch (NumberFormatException e){//Checks if user input wrong format > Must be Int
            //Error Output
            AliveOutput.setText("ERROR - Numbers Only");
            SleepOutput.setText("ERROR - Numbers Only");
        }
    }//GEN-LAST:event_CalculateActionPerformed

    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionPerformed
        //Closes Programs
        this.dispose();
    }//GEN-LAST:event_QuitActionPerformed

    private void AliveOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AliveOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AliveOutputActionPerformed

    private void SleepOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SleepOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SleepOutputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SleepCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SleepCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SleepCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SleepCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SleepCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AliveOutput;
    private javax.swing.JTextField BDayInput;
    private javax.swing.JLabel BDayLabel;
    private javax.swing.JTextField BMonthInput;
    private javax.swing.JLabel BMonthLabel;
    private javax.swing.JTextField BYearInput;
    private javax.swing.JLabel BYearLabel;
    private javax.swing.JLabel BirthdateLabel;
    private javax.swing.JButton Calculate;
    private javax.swing.JButton Quit;
    private javax.swing.JTextField SleepOutput;
    private javax.swing.JTextField TDayInput;
    private javax.swing.JLabel TDayLabel;
    private javax.swing.JTextField TMonthInput;
    private javax.swing.JLabel TMonthLabel;
    private javax.swing.JTextField TYearInput;
    private javax.swing.JLabel TYearLabel;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JLabel TodayLabel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
